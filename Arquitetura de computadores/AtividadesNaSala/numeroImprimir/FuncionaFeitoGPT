.code16 			    
.text 				    
.globl _start

_start:             
    movw $54321, %ax    # Example value to print
    call print_number   # Call routine to print AX as a number
    jmp loop_final      # Infinite loop after printing

# Routine to print the number in AX
print_number:
    movw %ax, %dx       # Copy AX to DX to preserve the original value
    movw $0, %cx        # CX will be used to count the number of digits

convert_loop:
    xorw %dx, %dx       # Clear DX (for division remainder)
    movw $10, %bx       # Divisor (10)
    divw %bx            # Divide AX by 10, remainder in DX
    addb $48, %dl       # Convert remainder to ASCII ('0' = 48)
    pushw %dx           # Push remainder (ASCII digit) onto the stack
    incw %cx            # Increment digit counter
    cmpw $0, %ax        # Check if AX is now 0
    jne convert_loop    # If not, repeat

print_loop:
    popw %ax            # Pop the digit from the stack
    movb %al, %dl       # Move the digit to DL (for printing)
    movb $0x0e, %ah     # BIOS interrupt for teletype output
    int $0x10           # Print the character in DL
    loop print_loop     # Loop until all digits are printed (based on CX)

    ret                 # Return to caller

# Infinite loop to halt the CPU
loop_final:
    hlt
    jmp loop_final

# Move the position to byte 510 (MBR signature)
. = _start + 510

# Boot signature
.byte 0x55		    
.byte 0xaa		    
 